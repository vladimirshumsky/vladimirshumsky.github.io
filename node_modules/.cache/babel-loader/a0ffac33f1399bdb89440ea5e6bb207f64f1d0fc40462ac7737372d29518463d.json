{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/codes/task/src/components/pages/Registration/components/RegistrationInputEmail.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { setEmailError, setEmailReg } from \"@/redux/store/registration-page/registration-page.slice\";\nimport Input from \"@/components/common/Input/Input\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegistrationInputName = () => {\n  _s();\n  const dispatch = useDispatch();\n  const value = useSelector(state => state.auth.emailRegistration);\n  const errorState = useSelector(state => state.auth.error);\n  return /*#__PURE__*/_jsxDEV(Input, {\n    error: errorState.email,\n    errorMessage: \"Возможно вы ошиблись в указании почтового сервиса\",\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    value: value,\n    onChange: e => {\n      dispatch(setEmailError(false));\n      dispatch(setEmailReg(e.target.value));\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(RegistrationInputName, \"Yk7cGktrahogJIKFGZ0WXRgGKr0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = RegistrationInputName;\nexport default RegistrationInputName;\nvar _c;\n$RefreshReg$(_c, \"RegistrationInputName\");","map":{"version":3,"names":["React","setEmailError","setEmailReg","Input","useDispatch","useSelector","RegistrationInputName","dispatch","value","state","auth","emailRegistration","errorState","error","email","e","target"],"sources":["/Users/user/Documents/codes/task/src/components/pages/Registration/components/RegistrationInputEmail.jsx"],"sourcesContent":["import React from \"react\";\nimport {\n  setEmailError,\n  setEmailReg,\n} from \"@/redux/store/registration-page/registration-page.slice\";\nimport Input from \"@/components/common/Input/Input\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst RegistrationInputName = () => {\n  const dispatch = useDispatch();\n  const value = useSelector((state) => state.auth.emailRegistration);\n  const errorState = useSelector((state) => state.auth.error);\n\n  return (\n    <Input\n      error={errorState.email}\n      errorMessage={\"Возможно вы ошиблись в указании почтового сервиса\"}\n      type={\"email\"}\n      name={\"email\"}\n      placeholder={\"Email\"}\n      value={value}\n      onChange={(e) => {\n        dispatch(setEmailError(false));\n        dispatch(setEmailReg(e.target.value));\n      }}\n    />\n  );\n};\nexport default RegistrationInputName;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,aAAa,EACbC,WAAW,QACN,yDAAyD;AAChE,OAAOC,KAAK,MAAM,iCAAiC;AACnD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAAC;AAEvD,MAAMC,qBAAqB,GAAG,MAAM;EAAA;EAClC,MAAMC,QAAQ,GAAGH,WAAW,EAAE;EAC9B,MAAMI,KAAK,GAAGH,WAAW,CAAEI,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,iBAAiB,CAAC;EAClE,MAAMC,UAAU,GAAGP,WAAW,CAAEI,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACG,KAAK,CAAC;EAE3D,oBACE,QAAC,KAAK;IACJ,KAAK,EAAED,UAAU,CAACE,KAAM;IACxB,YAAY,EAAE,mDAAoD;IAClE,IAAI,EAAE,OAAQ;IACd,IAAI,EAAE,OAAQ;IACd,WAAW,EAAE,OAAQ;IACrB,KAAK,EAAEN,KAAM;IACb,QAAQ,EAAGO,CAAC,IAAK;MACfR,QAAQ,CAACN,aAAa,CAAC,KAAK,CAAC,CAAC;MAC9BM,QAAQ,CAACL,WAAW,CAACa,CAAC,CAACC,MAAM,CAACR,KAAK,CAAC,CAAC;IACvC;EAAE;IAAA;IAAA;IAAA;EAAA,QACF;AAEN,CAAC;AAAC,GAnBIF,qBAAqB;EAAA,QACRF,WAAW,EACdC,WAAW,EACNA,WAAW;AAAA;AAAA,KAH1BC,qBAAqB;AAoB3B,eAAeA,qBAAqB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}